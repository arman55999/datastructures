STACKL.H
#pragma once
template <class T>
struct Node 
{
	T info;
	Node<T>* link;
};

template <class T>
class Stack 
{
private:
	Node<T>* top;

public:
	Stack() :top(0) {}
	~Stack() {}
	bool isEmpty() { return top == 0; }
	void push(T item);
	void pop();
	T getTop();
	void print();
};



STACKL.CPP
#include <iostream>
#include "Stackl.h"

template <class T>
void Stack<T>::push(T item)
{
	Node<T>* ptr = new Node;
	if (!ptr) throw "Overload in heap";
	ptr->info = item;
	ptr->link = top;
	top = ptr;
}

template <class T>
void Stack<T>::pop()
{
	if (isEmpty) throw "Stack is empty";
	Node<T>* ptr = top;
	top = top->link;
	delete ptr;
	return;
}

template <class T>
T Stack<T>::getTop() 
{
	if (isEmpty) throw "Stack is empty";
	return top->info;
}

template <class T>
void Stack<T>::print() 
{
	Node<T>* ptr = top;
	while (ptr != 0) 
	{
		cout << ptr->info<<" ";
		ptr = ptr->link;
	}
	cout << endl;
}
